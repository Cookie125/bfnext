#! /bin/bash

trap quit SIGINT SIGTERM SIGQUIT

if test -z "$1" -o -z "$2" -o -z "$3"; then
    echo "usage: dcs <name> <git-path> <miz-name> <srs>"
    exit 1
fi

if echo "$1" | grep -Eq "[[:space:]]"; then
    echo "name may not contain white space"
    exit 2
fi

if ! test -d "${HOME}/bfnext/${2}"; then
    echo "git path ${HOME}/bfnext/${2} not found, or not a directory"
    exit 3
fi

if ! test -f "${HOME}/bfnext/${2}/${3}"; then
    echo "mission ${HOME}/bfnext/${2}/${3} not found in ${2}"
    exit 4
fi

if test "$4" == "true"; then
    USE_SRS=1
elif test "$4" == "false"; then
    USE_SRS=0
else
    echo "usage: dcs <name> <git-path> <miz-name> <srs>"
    echo "expected true or false for srs"
    exit 5
fi

NAME="$1"
SRS="${HOME}/.wine/drive_c/Program Files/srs_${NAME}"
DCS="${HOME}/.wine/drive_c/Program Files/Eagle Dynamics/DCS World Server"
DATA="${HOME}/.wine/drive_c/users/dcs/Saved Games/$NAME"
BFLOG="${DATA}/Logs/bfnext.txt"
INSTALLED_MIZ="${DATA}/Missions/$(ls "${DATA}"/Missions)"
INSTALLED_CFG="$(ls "${DATA}"/*_CFG)"
GIT_PATH="$2"
GIT_MIZ="$3"
GIT_CFG="$(ls "${HOME}/bfnext/${GIT_PATH}"/*_CFG)"

if ! test -d "$DCS"; then
    echo "dcs install directory missing"
    exit 8
fi

if ! test -d "$DATA"; then
    echo "dcs data dir missing, wrong name?"
    exit 8
fi

if ! test -f "$INSTALLED_MIZ"; then
    echo "missing installed miz $INSTALLED_MIZ"
    exit 9
fi

if ! test -f "$INSTALLED_CFG"; then
    echo "missing installed config $INSTALLED_CFG"
    exit 10
fi

if test -z "$GIT_CFG" -o ! -f "$GIT_CFG"; then
    echo "$GIT_CFG not found or not a file"
    exit 5
fi

function update_from_git {
    cd ~/bfnext
    mkdir -p "${DATA}/Scripts/Hooks"
    mkdir -p "${DATA}/Config"
    mkdir -p "${DATA}/Missions"
    git pull
    cp miz/bflib.dll "${DATA}/Scripts"
    cp bflib/lua/hooks.lua "${DATA}/Scripts/Hooks"
    cp "${GIT_PATH}/DCS-SRS-AutoConnectGameGUI.lua" "${DATA}/Scripts/Hooks"
    cp "${GIT_PATH}/${GIT_MIZ}" "$INSTALLED_MIZ"
    cp "${GIT_PATH}/serverSettings.lua" "${DATA}/Config"
    cp "${GIT_PATH}/autoexec.cfg" "${DATA}/Config"
    # merge git config changes with the local admin, banned, and rules lists
    if test -f "$INSTALLED_CFG"; then
        jq --slurpfile ic "$INSTALLED_CFG" \
           '($ic[0] | { admins, rules, banned }) as $s | del(.[$s | keys[]]) + $s' \
           "$GIT_CFG" \
           >"${INSTALLED_CFG}.tmp"
        mv "${INSTALLED_CFG}.tmp" "$INSTALLED_CFG"
    else
        cp "$GIT_CFG" "$INSTALLED_CFG"
    fi
}

function kill_dcs() {
    PID=$(ps auxwww \
              | grep "DCS_server.exe -w $NAME" \
              | grep -v grep \
              | awk '{print $2}')
    echo "killing DCS with $PID"
    if ! test -z $PID; then
        kill -9 $PID
    fi
}

function quit() {
    kill_dcs
    for job in $(jobs -p); do
        kill $job
    done
}

function watchdog() {
    while true; do
        TS=$(stat -c "%Y" "$BFLOG")
        NOW=$(date +%s)
        if test $((NOW - TS)) -gt 300; then
            echo "$(date): watchdog kill DCS"
            kill_dcs
        fi
        sleep 60
    done 
}

function run_srs() {
    while true; do
        cd "$SRS"
        wine ./SR-Server.exe
        sleep 10
    done
}

function dcs_port() {
   grep -F '["port"]' "${DATA}/Config/serverSettings.lua" | sed -e 's/.*= *//' | sed -e 's/[",]//g'
}

function block_incoming() {
    sudo iptables -D INPUT -i enp1s0f0 -p tcp --dport $1 -j ACCEPT
    sudo iptables -D INPUT -i enp1s0f0 -p udp --dport $1 -j ACCEPT
}

function unblock_incoming() {
    sleep 120 
    sudo iptables -I INPUT -i enp1s0f0 -p tcp --dport $1 -j ACCEPT
    sudo iptables -I INPUT -i enp1s0f0 -p udp --dport $1 -j ACCEPT
}

function run_dcs() {
    while true; do
        update_from_git
        PORT=$(dcs_port)
        cd "$DCS"
        block_incoming $PORT
        unblock_incoming $PORT &
        WINEDLLOVERRIDES='wbemprox=n' wine bin/DCS_server.exe -w "$NAME" >>"${DATA}/Logs/winedcs.log" 2>&1
        sleep 10
    done
}

# prevent watchdog kill before server start
touch "$BFLOG"
watchdog &
run_dcs &
if test $USE_SRS -eq 1; then
    run_srs &
fi
wait
